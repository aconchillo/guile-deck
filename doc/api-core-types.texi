@c -*-texinfo-*-
@c This file is part of Guile-Deck Reference Manual.
@c Copyright (C) 2021 Artyom V. Poptsov
@c See the file guile-deck.texi for copying conditions.

@node Core Types
@section Core Types

@subsection Devices
@cindex Devices

@deftp {Class} <device> #:id [#:display-name=#f] [#:last-seen-ip=#f] @
       [#:last-seen-timestamp=#f]
See @url{https://matrix.org/docs/api/client-server/#!/Device32management/getDevices}.

Constructor parameters:

@table @asis
@item #:id (server <string>)
@strong{required} Identifier of this device.

@item #:display-name (name <string>)
Display name set by the user for this device. Absent if no name has been set.

@item #:last-seen-ip (ip <string>)
The IP address where this device was last seen. (May be a few minutes out of
date, for efficiency reasons).

@item #:last-seen-timestamp (ip <number>)
The timestamp (in milliseconds since the unix epoch) when this devices was
last seen. (May be a few minutes out of date, for efficiency reasons).

@end table

@end deftp

@deffn {Scheme Procedure} device? object
Check if @var{object} is an instance of the @code{<device>} class.
@end deffn

@deffn {Scheme Procedure} device-id (device <device>)
Get the @var{device} ID.
@end deffn

@deffn {Scheme Procedure} device-display-name (device <device>)
Get the @var{device} display name.
@end deffn

@deffn {Scheme Procedure} device-last-seen-ip (device <device>)
Get the @var{device} last seen IP address.
@end deffn

@deffn {Scheme Procedure} device-last-seen-timestamp (device <device>)
The timestamp (in milliseconds since the unix epoch) when this @var{device}
was last seen.
@end deffn

@deffn {Scheme Procedure} alist->device (alist <list>)
Convert an associative list @var{alist} to a @code{<device>} instance.
@end deffn

@subsection Filters
@cindex Filters

@deftp {Class} <filter> @
       [#:account-data='undefined] @
       [#:event-fields='undefined] @
       [#:event-format='undefined] @
       [#:presence='undefined] @
       [#:room='undefined]
Matrix filter.

See
@url{https://matrix.org/docs/api/client-server/#!/Room32participation/defineFilter}.

Constructor parameters:

@table @asis

@item #:account-data event-filter
The user account data that isn't associated with rooms to include.

Type: @code{<event-filter>} or @code{undefined} symbol.

@item #:event-fields fields
List of event fields to include. If this list is absent then all fields are
included. The entries may include '.' characters to indicate sub-fields. So
['content.body'] will include the 'body' field of the 'content' object. A
literal '.' character in a field name may be escaped using a '\'. A server may
include more fields than were requested.

Type: @code{<list>} of @code{<string>} or @code{undefined} symbol.

@item #:event-format (format <symbol>)
The format to use for events. 'client' will return the events in a format
suitable for clients. 'federation' will return the raw event as received over
federation. The default is 'client'.

Allowed values: @code{client}, @code{federation}, @code{undefined}.

@item #:presence filter
The presence updates to include.

Type: @code{<event-filter>} or @code{undefined} symbol.

@item #:room filter
Filters to be applied to room data.

Type: @code{<event-filter>} or @code{undefined} symbol.

@end table
@end deftp

@c -----------------------------------------------------------------------------

@deffn {Scheme Procedure} filter? object
Check if an @var{object} is a @code{<filter>} instance.
@end deffn

@deffn  {Scheme Procedure} filter->alist (filter <filter>)
@deffnx {Scheme Procedure} filter->alist (filter <room-filter>)
@deffnx {Scheme Procedure} filter->alist (filter <state-filter>)
@deffnx {Scheme Procedure} filter->alist (filter <event-filter>)
Convert a @var{filter} instance to an alist.
@end deffn

@deffn  {Scheme Procedure} filter->json-string (filter <filter>)
@deffnx {Scheme Procedure} filter->json-string (filter <room-filter>)
@deffnx {Scheme Procedure} filter->json-string (filter <state-filter>)
@deffnx {Scheme Procedure} filter->json-string (filter <event-filter>)
Convert a @var{filter} instance to a JSON string.
@end deffn

@c -----------------------------------------------------------------------------
@subsubsection Event Filter

@deftp {Class} <event-filter> @
       [#:limit='undefined] @
       [#:not-senders='undefined] @
       [#:not-types='undefined] @
       [#:senders='undefined] @
       [#:types='undefined]

See
@url{https://matrix.org/docs/api/client-server/#!/Room32participation/defineFilter}

Constructor parameters:

@table @asis

@item  #:limit (limit <number>)
@itemx #:limit (limit <symbol>)
The maximum number of events to return.

@item  #:not-senders (not-senders <list>)
@itemx #:not-senders (not-senders <symbol>)
A list of sender IDs of @code{<string>} type to exclude. If this list is
@code{undefined} then no senders are excluded. A matching sender will be
excluded even if it is listed in the ``senders'' filter (see below.)

@item  #:not-types (not-types <list>)
@itemx #:not-types (not-types <symbol>)
A list of event types (presented as @code{<string>} instances) to exclude. If
this list is @code{undefined} then no event types are excluded. A matching
type will be excluded even if it is listed in the ``types'' filter. A ``*''
can be used as a wildcard to match any sequence of characters.

@item  #:senders (senders <list>)
@itemx #:senders (senders <symbol>)
A list of senders IDs of @code{<string>} type to include. If this list is
absent then all senders are included.

@item  #:types (types <list>)
@itemx #:types (types <symbol>)
A list of event types (presented as @code{<string>} instances) to include. If
this list is absent then all event types are included. A ``*'' can be used as
a wildcard to match any sequence of characters.

@end table

@end deftp

@c -----------------------------------------------------------------------------
@subsubsection Room Filter

@deftp {Class} <room-filter> @
       [#:account-data='undefined] @
       [#:ephemeral='undefined] @
       [#:include-leave?='undefined] @
       [#:not-rooms='undefined] @
       [#:rooms='undefined] @
       [#:state='undefined] @
       [#:timeline='undefined]

Constructor parameters:

@table @asis

@item  #:account-data (value <event-filter>)
@itemx #:account-data (value <symbol>)
The per user account data to include for rooms.

@item  #:ephemeral (value <event-filter>)
@itemx #:ephemeral (value <symbol>)
The events that aren't recorded in the room history, e.g. typing and receipts,
to include for rooms.

@item  #:include-leave? (value <boolean>)
@itemx #:include-leave? (value <symbol>)
Include rooms that the user has left in the sync, default false (if
@code{undefined}.)

@item  #:not-rooms (value <list>)
@itemx #:not-rooms (value <symbol>)
A list of room IDs to exclude. If @code{undefined} then no rooms are excluded.

@item  #:rooms (value <list>)
@itemx #:rooms (value <symbol>)
A list of room IDs to include. If @code{undefined} then all rooms are
included.

@item  #:state (value <state-filter>)
@itemx #:state (value <symbol>)
The state events to include for rooms.

@item  #:timeline (value <event-filter>)
@itemx #:timeline (value <symbol>)
The message and state update events to include for rooms.

@end table

@end deftp

@c -----------------------------------------------------------------------------
@subsubsection State Filter

@deftp {Data Type} <state-filter> @
       [#:limit='undefined] @
       [#:not-senders='undefined] @
       [#:not-types='undefined] @
       [#:senders='undefined] @
       [#:types='undefined]
       [#:contains-url?='undefined] @
       [#:include-redundant-members?='undefined] @
       [#:lazy-load-members?='undefined] @
       [#:not-rooms='undefined] @
       [#:rooms='undefined]

Constructor parameters:

@table @asis

@item  #:limit (value <number>)
@itemx #:limit (value <symbol>)
The maximum number of events to return.

@item  #:not-senders (value <list>)
@itemx #:not-senders (value <symbol>)
A list of sender IDs to exclude. If @code{undefined} then no senders are
excluded. A matching sender will be excluded even if it is listed in the
``senders'' filter.

@item  #:senders (value <list>)
@itemx #:senders (value <symbol>)
A list of senders IDs to include. If @code{undefined} then all senders are
included.

@item  #:not-types (value <list>)
@itemx #:not-types (value <symbol>)
A list of event types to exclude. If @code{undefined} then no event types are
excluded. A matching type will be excluded even if it is listed in the
``types'' filter. A ``*'' can be used as a wildcard to match any sequence of
characters.

@item  #:types (value <list>)
@itemx #:types (value <symbol>)
A list of event types to include. If @code{undefined} then all event types are
included. A ``*'' can be used as a wildcard to match any sequence of
characters.

@item  #:not-rooms (value <list>)
@itemx #:not-rooms (value <symbol>)
A list of senders IDs to include. If @code{undefined} then all senders are
included.

@item  #:rooms (value <list>)
@itemx #:rooms (value <symbol>)
A list of room IDs to include. If @code{undefined} then all rooms are
included.

@item  #:contains-url? (value <boolean>)
@itemx #:contains-url? (value <symbol>)
If @code{#t}, includes only events with a url key in their content. If
@code{#f}, excludes those events. If @code{undefined}, URL key is not
considered for filtering.

@item  #:include-redundant-members? (value <list>)
@itemx #:include-redundant-members? (value <symbol>)
If @code{#t}, sends all membership events for all events, even if they have
already been sent to the client. Does not apply unless ``lazy_load_members''
is @code{#t}. Defaults to @code{#t} when @code{undefined}.

@item  #:lazy-load-members? (value <list>)
@itemx #:lazy-load-members? (value <symbol>)
If @code{#t}, enables lazy-loading of membership events. Defaults to @code{#f}
when @code{undefined}.

@end table

@end deftp

@c -----------------------------------------------------------------------------
@subsection Matrix Content URI

@deftp {Class} <matrix-content-uri> @
       [#:server=#f] @
       [#:protocol=''mxc''] @
       [#:media-id=#f]

Constructor parameters:

@table @asis
@item #:server (value <string>)
@item #:protocol (value <string>)
@item #:media-id (value <string>)
@end table

@end deftp

@deffn {Scheme Procedure} matrix-content-uri? object
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-content-uri-protocol (string <string>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-content-uri-server (string <string>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-content-uri-media-id (string <string>)
TODO:
@end deffn

@deffn {Scheme Procedure} string->matrix-content-uri (string <string>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-content-uri->string (uri <matrix-content-uri>)
TODO:
@end deffn

@subsection Matrix ID

@deftp {Class} <matrix-id> @
       [#:type=#f] @
       [#:server=#f] @
       [#:identity=#f]

Constructor parameters:

@table @asis
@item #:type (value <symbol>)
@item #:server (value <string>)
@item #:identity (value <string>)
@end table

@end deftp

@deffn {Scheme Procedure} matrix-id? object
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-id-type (id <matrix-id>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-id-identity (id <matrix-id>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-id-server (id <matrix-id>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-type->char (identity <symbol>)
TODO:
@end deffn

@deffn {Scheme Procedure} char->matrix-type (ch <char>)
TODO:
@end deffn

@deffn {Scheme Procedure} matrix-id->string (id <matrix-id>)
TODO:
@end deffn

@deffn {Scheme Procedure} string->matrix-id (string <string>)
TODO:
@end deffn

@subsection State

@deftp {Class} <state> @
       #:next-batch @
       [#:account-data=#f] @
       [#:device-lists=#f] @
       [#:device-one-time-keys-count=#f] @
       [#:presence=#f] @
       [#:rooms=#f] @
       [#:to-device=#f]
This class describes a Matrix state.

See @url{https://matrix.org/docs/api/client-server/#!/Room32participation/sync}.

Constructor parameters:

@table @asis
@item #:next-batch (value <string>)
@strong{required} The batch token to supply in the since param of the next
``/sync'' request.

@item #:account-data (value <list>)
The global private data created by this user.

@item #:device-lists (value <list>)
Information on end-to-end device updates.

@item #:device-one-time-keys-count value
Information on end-to-end encryption keys.

@item #:presence (value <list>)
A @code{<list>} of @code{<matrix-event>}. The updates to the presence status
of other users.

@item #:rooms value
Updates to rooms.

@item #:to-device value
Information on the send-to-device messages for the client device.

@end table

@end deftp

@deffn {Scheme Procedure} state? object
Check if a @var{object} is an instance of @code{<state>} class.
@end deffn

@deffn {Scheme Procedure} state-account-data (state <state>)
Get the global private data created by this user as a list of
@code{<matrix-event>}.
@end deffn

@deffn {Scheme Procedure} state-device-lists (state <state>)
Get the information on end-to-end device updates.
@end deffn

@deffn {Scheme Procedure} state-device-one-time-keys-count (state <state>)
Get the information on end-to-end encryption keys.
@end deffn

@deffn {Scheme Procedure} state-next-batch (state <state>)
Get the batch token to supply in the since param of the next @code{/sync}
request.
@end deffn

@deffn {Scheme Procedure} state-presense (state <state>)
Get the updates to the presence status of other users.
@end deffn

@deffn {Scheme Procedure} state-rooms (state <state>)
Get the updates to rooms.
@end deffn

@deffn {Scheme Procedure} state-to-device (state <state>)
Get the information on the send-to-device messages for the client device.
@end deffn

@deffn {Scheme Procedure} state-rooms-invite (state <state>)
Get the updates to rooms related to invitations.
@end deffn

@deffn {Scheme Procedure} state-rooms-invite-available? (state <state>)
Check if invitation updates available.
@end deffn

@deffn {Scheme Procedure} state-rooms-join (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-join-available? (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-leave (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-leave-available? (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} alist->state (alist <list>)
Convert an associative list @var{alist} to a @code{<state>} instance.
@end deffn

@c Local Variables:
@c TeX-master: "guile-deck.texi"
@c End:
