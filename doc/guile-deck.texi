\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-deck.info
@documentencoding UTF-8
@settitle Guile-Deck Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-Deck version @value{VERSION}.

Copyright (C) 2021 Artyom V. Poptsov @email{poptsov.artyom@@gmail.com}

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-Deck: (guile-deck).  GNU Guile SDK for the Matrix network.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-Deck Reference Manual
@subtitle For Guile-Deck @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-Deck Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-Deck is an SDK for the @url{https://matrix.org, Matrix} network for
programs written in @url{https://www.gnu.org/software/guile/, GNU Guile}.

@node Installation
@chapter Installation

Guile-Deck sources are available from GitHub at
@url{https://github.com/artyom-poptsov/guile-deck/}. This section describes
requirements of Guile-Deck and installation process.

Guile-Deck depends on the following packages:

@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.2
@item @url{https://github.com/aconchillo/guile-json, Guile-JSON}
@item @url{https://notabug.org/cwebber/guile-gcrypt, Guile-GCrypt}
@item @url{https://gnutls.org/, Guile-Gnutls}
@end itemize

Get the sources of Guile-Deck from GitHub using Git (a good introduction to
Git is @url{https://git-scm.com/book/en/v2, Pro Git} book, which is available
online):

@example
$ git clone git@@github.com:artyom-poptsov/guile-deck.git
@end example

Configure the sources:

@example
$ cd guile-deck/
$ autoreconf -vif
$ ./configure
@end example

Build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

@section Matrix

These procedures are available from the module @code{(deck matrix)}.

@deffn {Class} <matrix>
This class provides an entry point for Matrix network.
@end deffn

@deffn {Scheme Procedure} matrix-shared-secret matrix
Get the shared secret from the @var{matrix} object.
@end deffn

@deffn {Scheme Procedure} matrix-server matrix
Get the server URI from the @var{matrix} object.
@end deffn

@deffn {Scheme Procedure} matrix-versions matrix
Gets the versions of the specification supported by the a @var{matrix}
instance.
@end deffn

@deffn {Scheme Procedure} matrix-debug-mode? matrix
Check if a @var{matrix} instance is in the debug mode.
@end deffn

@deffn {Scheme Procedure} matrix-register matrix user password [#:admin?=#f] [#:device-id=#f]
Register a new user on the @var{matrix} server with the specified password.
@end deffn

@deffn {Scheme Procedure} matrix-login matrix type user password
Try to authenticate on a @var{matrix} server with the given credentials.
Return a new session instance.
@end deffn

@deffn {Scheme Procedure} matrix-request-nonce matrix type user password
Get 'nonce' hash from a server.
@end deffn

@section Core

@subsection MAC

@deffn {Scheme Procedure} bin->hex bytevector
Convert a @var{bytevector} to a HEX string.
@end deffn

@deffn {Scheme Procedure} generate-mac (shared-secret <string>) (data <list>)
Generate a MAC based on a @var{shared-secret} and @var{data}.
@end deffn

@subsection Room
@deffn {Class} <room>
This class describes a Matrix room.
@end deffn

@deffn {Scheme Procedure} room? x
Check if a @var{x} is a <room> instance.
@end deffn

@deffn {Scheme Procedure} room-alias (room <room>)

@end deffn

@deffn {Scheme Procedure} room-id (room <room>)
Get the Matrix ID for a given @var{room}.
@end deffn

@deffn {Scheme Procedure} room-id/string (room <room>)
Get the Matrix ID as a string for a given @var{room}.
@end deffn

@deffn {Scheme Procedure} room-session (room <room>)
Get the current session for a given @var{room}.
@end deffn

@deffn {Scheme Procedure} room-access-token (room <room>)
Get the access token for a given @var{room}.
@end deffn

@deffn {Scheme Procedure} room-has-access-token? (room <room>)
Check if a @var{room} has an access token.
@end deffn

@deffn {Scheme Procedure} room-invite (room <room>) (user-id <matrix-id>)
@deffnx {Scheme Procedure} room-invite (room <room>) (user-id <string>)
Invite a user with a @var{user-id} to the @var{room}.
@end deffn

@deffn {Scheme Procedure} room-join (room <room>)
Join a @var{room}.
@end deffn

@deffn {Scheme Procedure} room-leave (room <room>)
Leave a @var{room}.
@end deffn

@deffn {Scheme Procedure} room-ban (room <room>) (user-id <matrix-id>) (reason <string>)
@deffnx {Scheme Procedure} room-ban (room <room>) (user-id <matrix-id>)
Ban a user with @var{user-id} in the @var{room}. If the user is currently in
the room, also kick them. When a user is banned from a room, they may not join
it or be invited to it until they are unbanned.

The caller must have the required power level in order to perform this
operation.
@end deffn

@deffn {Scheme Procedure} room-unban (room <room>) (user-id <matrix-id>)
Unban a user with @var{user-id} from the @var{room}. This allows them to be
invited to the room, and join if they would otherwise be allowed to join
according to its join rules.

The caller must have the required power level in order to perform this
operation.
@end deffn

@deffn {Scheme Procedure} room-receipt (room <room>) (event <matrix-event>) [#:type=``m.read''] [#:receipt='()]
This API updates the marker in a @var{room} for the given receipt @var{type}
to the @var{event} specified.
@end deffn

@deffn {Scheme Procedure} room-members (room <room>) [#:at=#f] [#:membership=#f] [#:not-membership=#f]
Get the list of members for the @var{room}.

Returns 3 values: an event list, ``start'' and ``end'' tokens.
@end deffn

@deffn {Scheme Procedure} room-messages room [#:limit=10] [#:from=#f] [#:to=#f] [#:filter=#f]
Get a list of message and state events for a @var{room}. It uses pagination
query parameters to paginate history in the room.

@var{room} must be a @code{<room>} instance.
@end deffn

@deffn {Scheme Procedure} room-state (room <room>)
Get the state events for the current state of a @var{room}.
@end deffn

@deffn  {Scheme Procedure} room-event (room <room>) (event-id <matrix-id>)
@deffnx {Scheme Procedure} room-event (room <room>) (event-id <string>)
Get a single event based on @var{event-id}. You must have permission to
retrieve this event e.g. by being a member in the room for this event.
@end deffn

@deffn {Scheme Procedure} room-send (room <room>) (type <string>) (body <list>) [(transaction-id <string>)]
Send a message event of a @var{type} with the given @var{body} to a
@var{room}. Message events allow access to historical events and pagination,
making them suited for "once-off" activity in a room.

@var{body} must be an associative list.

If no @var{transaction-id} is specified, the current time is used as
transaction ID.

Example:
@lisp
(room-send room "m.room.message"
           `(("body"    . "howdy!")
             ("msgtype" . "m.text")))
@end lisp
@end deffn

@subsection Session

@deffn {Class} <session>
This class describes a Matrix network session.
@end deffn

@deffn {Scheme Procedure} session? x
Check if @var{x} is a @code{<session>} instance.
@end deffn

@deffn {Scheme Procedure} session-token/alist (session <session>)
Returns the @var{session} token as an associative list suitable for converting
to a JSON object.
@end deffn

@deffn {Scheme Procedure} session-user-id (session <session>)
Get the @var{session} user ID as a @code{<matrix-id>} instance.
@end deffn

@deffn {Scheme Procedure} session-devices (session <session>)
Get the list of the known @var{session} devices.
@end deffn

@deffn {Scheme Procedure} session-sync (session <session>) [#:filter=#f] [#:since=#f] [#:full-state=#f] [#:set-presense=#f] [#:timeout=#f]
Synchronise the client's state with the latest state on the server. Clients
use this API when they first log in to get an initial snapshot of the state on
the server, and then continue to call this API to get incremental deltas to
the state, and to receive new messages.

See
@url{https://matrix.org/docs/api/client-server/#!/Room32participation/sync,
client-server documentation}
@end deffn

@deffn {Scheme Procedure} session-create-filter (session <session>) (filter <filter>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-create-room (session <session>) (name <string>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-join-room (session <session>) (room-id <matrix-id>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-joined-rooms (session <session>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-logout (session <session>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-logout/all (session <session>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-whoami (session <session>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-avatar-uri (session <session>)
TODO:
@end deffn

@deffn {Scheme Procedure} session-voip-turn-server (session <session>)
TODO:
@end deffn

@section Core Types

@subsection Devices

@subsection Filters

@deffn {Class} <filter>
Matrix filter.
@end deffn

@deffn {Scheme Procedure} filter? object
Check if an @var{object} is a @code{<filter>} instance.
@end deffn

@deffn {Scheme Procedure} filter->alist (filter <filter>)
Convert a @var{filter} instance to an alist.
@end deffn

@deffn {Scheme Procedure} filter->json-string (filter <filter>)
Convert a @var{filter} instance to a JSON string.
@end deffn

@subsection State

@deffn {Class} <state>
This class describes a Matrix state.

See @url{https://matrix.org/docs/api/client-server/#!/Room32participation/sync}.
@end deffn

@deffn {Scheme Procedure} state? object
Check if a @var{object} is an instance of @code{<state>} class.
@end deffn

@deffn {Scheme Procedure} state-account-data (state <state>)
Get the global private data created by this user as a list of
@code{<matrix-event>}.
@end deffn

@deffn {Scheme Procedure} state-device-lists (state <state>)
Get the information on end-to-end device updates.
@end deffn

@deffn {Scheme Procedure} state-device-one-time-keys-count (state <state>)
Get the information on end-to-end encryption keys.
@end deffn

@deffn {Scheme Procedure} state-next-batch (state <state>)
Get the batch token to supply in the since param of the next @code{/sync}
request.
@end deffn

@deffn {Scheme Procedure} state-presense (state <state>)
Get the updates to the presence status of other users.
@end deffn

@deffn {Scheme Procedure} state-rooms (state <state>)
Get the updates to rooms.
@end deffn

@deffn {Scheme Procedure} state-to-device (state <state>)
Get the information on the send-to-device messages for the client device.
@end deffn

@deffn {Scheme Procedure} state-rooms-invite (state <state>)
Get the updates to rooms related to invitations.
@end deffn

@deffn {Scheme Procedure} state-rooms-invite-available? (state <state>)
Check if invitation updates available.
@end deffn

@deffn {Scheme Procedure} state-rooms-join (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-join-available? (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-leave (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} state-rooms-leave-available? (state <state>)
TODO:
@end deffn

@deffn {Scheme Procedure} alist->state (alist <list>)
Convert an associative list @var{alist} to a @code{<state>} instance.
@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@section Matrix Client

@deffn {Class} <matrix-client>
This class describes a Matrix asynchronous client.
@end deffn

@deffn {Scheme Procedure} matrix-client? object
Check if @var{object} is a @code{<matrix-client>} instance.
@end deffn

@deffn {Scheme Procedure} matrix-client-session (matrix-client <matrix-client>)
Get the current session from a @var{matrix-client}.
@end deffn

@deffn {Scheme Procedure} matrix-client-on-invite (matrix-client <matrix-client>)
Get the callbacks for invitation updates.
@end deffn

@deffn {Scheme Procedure} matrix-client-on-update (matrix-client <matrix-client>)
Get the callbacks for updates to rooms the user joined to.
@end deffn

@deffn {Scheme Procedure} matrix-client-on-leave (matrix-client <matrix-client>)
Get the callbacks for leaving updates.
@end deffn

@deffn  {Scheme Procedure} matrix-client-room (matrix-client <matrix-client>) (room-id <string>)
@deffnx {Scheme Procedure} matrix-client-room (matrix-client <matrix-client>) (room-id <matrix-id>)
Get a @code{<room>} instance by its @var{room-id} from the internal
@var{matrix-client} hash table of rooms.
@end deffn

@deffn  {Scheme Procedure} matrix-client-rooms (matrix-client <matrix-client>)
Get all the fetched rooms from the @var{matrix-client} as a hash table where
keys are string room IDs and values are @code{<room>} instances.
@end deffn

@deffn {Scheme Procedure} matrix-client-start! (matrix-client <matrix-client>)
Start the @var{matrix-client}.
@end deffn

@deffn {Scheme Procedure} matrix-client-stop! (matrix-client <matrix-client>)
Stop the @var{matrix-client}.
@end deffn

@include fdl.texi

@bye
